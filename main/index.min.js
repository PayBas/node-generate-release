(function(){var e,t,r,i,o,n,a,s,l,u,p,c,_,f,h,g,d,m,v,k,y,w,q,x=function(e,t){function r(){this.constructor=e}for(var i in t)b.call(t,i)&&(e[i]=t[i]);return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e},b={}.hasOwnProperty;o=null!=process.env.IS_DEBUG,n=null!=process.env.IS_TEST,c=require("bluebird"),s=require("minimist"),l=require("./lib/Options"),r=require("./lib/GitCommands"),u=require("./lib/PackageFile"),h=require("./lib/askReleaseType"),v=require("./lib/incrementVersion"),f=require("./lib/askConfirmUpdate"),q=require("./lib/writeNewReadme"),module.exports=function(e){var t,i;return t=new l,i=new u,c["try"](function(){return e.slice(2)}).then(s).then(function(e){return t.parseArgs(e)}).then(function(){return n||r.checkForCleanWorkingDirectory()}).then(function(){return t.release_type?void 0:h().then(function(e){return t.release_type=e})}).then(function(){return i.load(t.package_file_location)}).then(function(){return t.current_version||(t.current_version=i.getVersion()),t.next_version=v(t.current_version,t.release_type)}).then(function(){return t.no_confirm||f(t.current_version,t.next_version)}).then(function(e){if(!e)throw new Error("Update Canceled")}).then(function(){if(n)throw console.log("Would have written to "+t.next_version+" to: "+t.package_file_location+" "+t.readme_file_location),new Error("But, your in debug mode so nothing actually happened")}).then(function(){return r.preCommands(t.next_version,t.skip_git_pull)}).then(function(){return q(t.readme_file_location,t.current_version,t.next_version)}).then(function(){return i.setVersion(t.next_version),i.save()}).then(function(){var e;return e=[t.readme_file_location,t.package_file_location],r.postCommands(t.next_version,e,t.skip_git_push)})["catch"](function(e){if(o)throw e;return console.log(e.message),process.exit(1)})},a=require("inquirer"),c=require("bluebird"),module.exports=function(e,t){var r;return r={type:"confirm",name:"confirm",message:"Are you sure you want to update the release from "+e+" to "+t},new c(function(e){return a.prompt(r,function(t){return e(t.confirm)})})},a=require("inquirer"),c=require("bluebird"),module.exports=function(){var e;return e={type:"list",name:"release",message:"Release Type?","default":"patch",choices:["patch","minor","major"]},new c(function(t){return a.prompt([e],function(e){return t(e.release)})})},e=require("child_process").execSync,k={env:process.env},k.env.GIT_MERGE_AUTOEDIT="no",module.exports.checkForCleanWorkingDirectory=function(){var t;if(t=e("git status",k),!/^nothing to commit, working directory clean$/m.test(t.toString()))throw new Error("Working directory is not clean, not ready for release")},module.exports.preCommands=function(t,r){return r||(e("git fetch",k),e("git checkout develop",k),e("git pull origin develop --rebase",k),e("git checkout master",k),e("git reset --hard origin/master",k)),e("git checkout develop",k),e("git flow release start "+t,k)},module.exports.postCommands=function(t,r,i){var o,n,a;for(n=0,a=r.length;a>n;n++)o=r[n],e("git add "+o,k);return e('git commit -am "Release '+t+'"',k),e('git flow release finish -m "'+t+'" '+t,k),i?void 0:(e("git push origin develop",k),e("git push origin master",k),e("git push origin --tags",k))},i=function(e){function t(e){this.message="generate-release\n\n-r --readme           Path to README.md file. Default: ./README.md\n-p --package          Path to package.json file. Default: ./package.json\n-c --current-version  Current Version. Default: read from package.json\n-t --release-type     Release Type: patch, minor, major. Default: prompt\n-n --no-confirm       Do not ask for confirmation. Default: prompt for confirmation\n-l --skip-git-pull    Do not pull from origin and rebase master and dev. Default: Do pull\n-s --skip-git-push    Do not push to origin when complete. Default: Do push\n"+(e||"")}return x(t,e),t}(Error),module.exports=i,module.exports=function(e,t){var r;switch(r=e.split(".").map(function(e){return parseInt(e)}),t){case"patch":r[2]++;break;case"minor":r[1]++,r[2]=0;break;case"major":r[0]++,r[1]=0,r[2]=0;break;default:console.log("Unknown Bump Type"),process.exit(1)}return r.join(".")},d=require("exists-sync"),p=require("path"),g=require("@nkcmr/bool"),y=require("object-pick"),m=require("extend"),i=require("./HelpError"),_={show_help:["h","help"],readme_file_location:["r","readme"],package_file_location:["p","package"],dot_release_file_location:["d","release-file"],current_version:["c","current-version"],release_type:["t","release-type"],no_confirm:["n","no-confirm"],skip_git_pull:["l","skip-git-pull"],skip_git_push:["s","skip-git-push"]},w=["readme_file_location","package_file_location","no_confirm","skip_git_pull","skip_git_push"],l=function(){function e(){}return e.prototype.readme_file_location="./README.md",e.prototype.package_file_location="./package.json",e.prototype.dot_release_file_location="./release.json",e.prototype.no_confirm=!1,e.prototype.release_type=null,e.prototype.current_version=null,e.prototype.skip_git_pull=!1,e.prototype.skip_git_push=!1,e.prototype.validation_error="\n",e.prototype.readArgsFromFile=function(){var e;return d(this.dot_release_file_location)?(e=require(this.package_file_location),m(this,y(e,w))):void 0},e.prototype.parseArgs=function(e){if(this.args=e,this.getArgumentValue("show_help"))throw new i;return this.readme_file_location=p.resolve(this.getArgumentValue("readme_file_location")||this.readme_file_location),this.package_file_location=p.resolve(this.getArgumentValue("package_file_location")||this.package_file_location),this.dot_release_file_location=p.resolve(this.getArgumentValue("dot_release_file_location")||this.dot_release_file_location),this.release_type=this.getArgumentValue("release_type")||this.release_type,this.no_confirm=this.getArgumentValue("no_confirm")||this.no_confirm,this.current_version=this.getArgumentValue("current_version")||this.current_version,this.skip_git_pull=this.getArgumentValue("skip_git_pull")||this.skip_git_pull,this.skip_git_push=this.getArgumentValue("skip_git_push")||this.skip_git_push,this.readArgsFromFile(),this.validateArguments()},e.prototype.validateArguments=function(){return this.validateReadmeFileLocation()&&this.validatePackageFileLocation()&&this.validateReleaseType()&&this.validateNoConfirm()&&this.validateSkipGitPull()&&this.validateSkipGitPush()||function(){throw new i(this.validation_error)}.call(this)},e.prototype.validateReadmeFileLocation=function(){return d(this.readme_file_location)?!0:(this.validation_error+="Readme does not exist: "+this.readme_file_location+"\n",!1)},e.prototype.validatePackageFileLocation=function(){return d(this.package_file_location)?!0:(this.validation_error+="Package file does not exist: "+this.package_file_location+"\n",!1)},e.prototype.validateCurrentVersion=function(){return this.current_version&&!this.current_version.test(/(\d+\.){2}\d+/)?(this.validation_error+="Invalid current version: "+this.current_version+"\n",!1):!0},e.prototype.validateReleaseType=function(){var e;return this.release_type&&"patch"!==(e=this.release_type)&&"minor"!==e&&"major"!==e?(this.validation_error+="Unknown release type: "+this.release_type+"\n",!1):!0},e.prototype.validateNoConfirm=function(){return"boolean"!=typeof this.no_confirm?(this.validation_error+="Invalid value for no-confirm\n",!1):!0},e.prototype.validateSkipGitPush=function(){return"boolean"!=typeof this.skip_git_push?(this.validation_error+="Invalid value for skip-git-push\n",!1):!0},e.prototype.validateSkipGitPull=function(){return"boolean"!=typeof this.skip_git_pull?(this.validation_error+="Invalid value for skip-git-pull\n",!1):!0},e.prototype.getArgumentValue=function(e){var t,r;return r=this,function(){var i,o,n,a;for(n=_[e],a=[],i=0,o=n.length;o>i;i++)t=n[i],r.args[t]&&a.push(r.args[t]);return a}()[0]},e}(),module.exports=l,t=require("fs"),u=function(){function e(){}return e.prototype.package_file_location=null,e.prototype.package_file_data={},e.prototype.load=function(e){return this.package_file_location=e,this.package_file_data=require(this.package_file_location)},e.prototype.save=function(){var e;return e=JSON.stringify(this.package_file_data,null,2),e+="\n",t.writeFileSync(this.package_file_location,e,"utf8")},e.prototype.setVersion=function(e){return this.package_file_data.version=e},e.prototype.getVersion=function(){return this.package_file_data.version},e}(),module.exports=u,t=require("fs"),module.exports=function(e,r,i){var o,n;return o=t.readFileSync(e),n=o.toString().replace(r,i),t.writeFileSync(e,n,"utf8")}}).call(this);