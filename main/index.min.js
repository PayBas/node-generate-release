(function(){var e,t,r,i,o,n,a,s,l,u,p,c,_,f,m,h,d,g,v,y,k,w,q,x,A,C=function(e,t){function r(){this.constructor=e}for(var i in t)b.call(t,i)&&(e[i]=t[i]);return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e},b={}.hasOwnProperty;n=null!=process.env.IS_DEBUG,a=null!=process.env.IS_TEST,f=require("bluebird"),l=require("minimist"),e=require("child_process"),c=require("parse-spawn-args"),u=require("./lib/Options"),i=require("./lib/GitCommands"),p=require("./lib/PackageFile"),d=require("./lib/askReleaseType"),k=require("./lib/incrementVersion"),h=require("./lib/askConfirmUpdate"),A=require("./lib/writeNewReadme"),module.exports=function(t){var r,o;return r=new u,o=new p,f["try"](function(){return t.slice(2)}).then(l).then(function(e){return r.parseArgs(e)}).then(function(){return a?void 0:i.checkForCleanWorkingDirectory()}).then(function(){return r.release_type?void 0:d().then(function(e){return r.release_type=e})}).then(function(){return o.load(r.package_file_location)}).then(function(){return r.current_version||(r.current_version=o.getVersion()),r.next_version=k(r.current_version,r.release_type)}).then(function(){return r.no_confirm||h(r.current_version,r.next_version)}).then(function(e){if(!e)throw new Error("Update Canceled")}).then(function(){return a?console.info("TEST: GitCommands.preCommands "+r.next_version+", "+r.skip_git_pull):i.preCommands(r.next_version,r.skip_git_pull)}).then(function(){return a?console.info("TEST: writeNewReadme "+r.readme_file_location+", "+r.current_version+", "+r.next_version):A(r.readme_file_location,r.current_version,r.next_version)}).then(function(){return a?console.info("TEST: package_file.setVersion "+r.next_version+" && package_file.save()"):(o.setVersion(r.next_version),o.save())}).then(function(){var t,i,o,n,s,l,u,p,_,f,m,h;if(a){for(_=r.pre_commit_commands,m=[],s=0,u=_.length;u>s;s++)t=_[s],m.push(console.info("TEST: EXEC: "+t));return m}for(p=r.pre_commit_commands,f=[],n=0,l=p.length;l>n;n++){if(o=p[n],i=c.parse(o),t=i.shift(),h=e.spawnSync(t,i),!h)throw h.error;f.push(void 0)}return f}).then(function(){var e;return e=[r.readme_file_location,r.package_file_location].concat(r.additional_files_to_commit),a?console.info("TEST: GitCommands.postCommands "+r.next_version+", "+e+", "+r.skip_git_push):i.postCommands(r.next_version,e,r.skip_git_push)})["catch"](function(e){if(n)throw e;return console.log(e.message),process.exit(1)})},s=require("inquirer"),f=require("bluebird"),module.exports=function(e,t){var r;return r={type:"confirm",name:"confirm",message:"Are you sure you want to update the release from "+e+" to "+t},new f(function(e){return s.prompt(r,function(t){return e(t.confirm)})})},s=require("inquirer"),f=require("bluebird"),module.exports=function(){var e;return e={type:"list",name:"release",message:"Release Type?","default":"patch",choices:["patch","minor","major"]},new f(function(t){return s.prompt([e],function(e){return t(e.release)})})},t=require("child_process").execSync,w={env:process.env},w.env.GIT_MERGE_AUTOEDIT="no",module.exports.checkForCleanWorkingDirectory=function(){var e;if(e=t("git status",w),!/^nothing to commit, working directory clean$/m.test(e.toString()))throw new Error("Working directory is not clean, not ready for release")},module.exports.preCommands=function(e,r){return r||(t("git fetch",w),t("git checkout develop",w),t("git pull origin develop --rebase",w),t("git checkout master",w),t("git reset --hard origin/master",w)),t("git checkout develop",w),t("git flow release start "+e,w)},module.exports.postCommands=function(e,r,i){var o,n,a;for(n=0,a=r.length;a>n;n++)o=r[n],t("git add "+o,w);return t('git commit -am "Release '+e+'"',w),t('git flow release finish -m "'+e+'" '+e,w),i?void 0:(t("git push origin develop",w),t("git push origin master",w),t("git push origin --tags",w))},o=function(e){function t(e){this.message="generate-release\n\n-r --readme           Path to README.md file. Default: ./README.md\n-p --package          Path to package.json file. Default: ./package.json\n-c --current-version  Current Version. Default: read from package.json\n-t --release-type     Release Type: patch, minor, major. Default: prompt\n-n --no-confirm       Do not ask for confirmation. Default: prompt for confirmation\n-l --skip-git-pull    Do not pull from origin and rebase master and dev. Default: Do pull\n-s --skip-git-push    Do not push to origin when complete. Default: Do push\n"+(e||"")}return C(t,e),t}(Error),module.exports=o,module.exports=function(e,t){var r;switch(r=e.split(".").map(function(e){return parseInt(e)}),t){case"patch":r[2]++;break;case"minor":r[1]++,r[2]=0;break;case"major":r[0]++,r[1]=0,r[2]=0;break;default:console.log("Unknown Bump Type"),process.exit(1)}return r.join(".")},v=require("exists-sync"),_=require("path"),g=require("@nkcmr/bool"),q=require("object-pick"),y=require("extend"),o=require("./HelpError"),m={show_help:["h","help"],readme_file_location:["r","readme"],package_file_location:["p","package"],dot_release_file_location:["d","release-file"],current_version:["c","current-version"],release_type:["t","release-type"],no_confirm:["n","no-confirm"],skip_git_pull:["l","skip-git-pull"],skip_git_push:["s","skip-git-push"]},x=["readme_file_location","package_file_location","no_confirm","skip_git_pull","skip_git_push","pre_commit_commands","additional_files_to_commit"],u=function(){function e(){}return e.prototype.readme_file_location="./README.md",e.prototype.package_file_location="./package.json",e.prototype.dot_release_file_location="./.release.json",e.prototype.no_confirm=!1,e.prototype.release_type=null,e.prototype.current_version=null,e.prototype.skip_git_pull=!1,e.prototype.skip_git_push=!1,e.prototype.pre_commit_commands=[],e.prototype.additional_files_to_commit=[],e.prototype.validation_error="\n",e.prototype.readArgsFromFile=function(){var e;return v(this.dot_release_file_location)?(e=require(this.dot_release_file_location),y(this,q(e,x))):void 0},e.prototype.parseArgs=function(e){if(this.args=e,this.getArgumentValue("show_help"))throw new o;return this.readme_file_location=_.resolve(this.getArgumentValue("readme_file_location")||this.readme_file_location),this.package_file_location=_.resolve(this.getArgumentValue("package_file_location")||this.package_file_location),this.dot_release_file_location=_.resolve(this.getArgumentValue("dot_release_file_location")||this.dot_release_file_location),this.release_type=this.getArgumentValue("release_type")||this.release_type,this.no_confirm=this.getArgumentValue("no_confirm")||this.no_confirm,this.current_version=this.getArgumentValue("current_version")||this.current_version,this.skip_git_pull=this.getArgumentValue("skip_git_pull")||this.skip_git_pull,this.skip_git_push=this.getArgumentValue("skip_git_push")||this.skip_git_push,this.readArgsFromFile(),this.validateArguments()},e.prototype.validateArguments=function(){return this.validateReadmeFileLocation()&&this.validatePackageFileLocation()&&this.validateReleaseType()&&this.validateNoConfirm()&&this.validateSkipGitPull()&&this.validateSkipGitPush()&&this.validatePreCommitCommands()&&this.validateAdditionalFilesToCommit()||function(){throw new o(this.validation_error)}.call(this)},e.prototype.validateReadmeFileLocation=function(){return v(this.readme_file_location)?!0:(this.validation_error+="Readme does not exist: "+this.readme_file_location+"\n",!1)},e.prototype.validatePackageFileLocation=function(){return v(this.package_file_location)?!0:(this.validation_error+="Package file does not exist: "+this.package_file_location+"\n",!1)},e.prototype.validateCurrentVersion=function(){return this.current_version&&!this.current_version.test(/(\d+\.){2}\d+/)?(this.validation_error+="Invalid current version: "+this.current_version+"\n",!1):!0},e.prototype.validateReleaseType=function(){var e;return this.release_type&&"patch"!==(e=this.release_type)&&"minor"!==e&&"major"!==e?(this.validation_error+="Unknown release type: "+this.release_type+"\n",!1):!0},e.prototype.validateNoConfirm=function(){return"boolean"!=typeof this.no_confirm?(this.validation_error+="Invalid value for no-confirm\n",!1):!0},e.prototype.validateSkipGitPush=function(){return"boolean"!=typeof this.skip_git_push?(this.validation_error+="Invalid value for skip-git-push\n",!1):!0},e.prototype.validateSkipGitPull=function(){return"boolean"!=typeof this.skip_git_pull?(this.validation_error+="Invalid value for skip-git-pull\n",!1):!0},e.prototype.validatePreCommitCommands=function(){return Array.isArray(this.pre_commit_commands)?!0:(this.validation_error+="Pre Git Commands must be an array",!1)},e.prototype.validateAdditionalFilesToCommit=function(){return Array.isArray(this.additional_files_to_commit)?!0:(this.validation_error+="Additional Files to Commit must be an array",!1)},e.prototype.getArgumentValue=function(e){var t,r;return r=this,function(){var i,o,n,a;for(n=m[e],a=[],i=0,o=n.length;o>i;i++)t=n[i],r.args[t]&&a.push(r.args[t]);return a}()[0]},e}(),module.exports=u,r=require("fs"),p=function(){function e(){}return e.prototype.package_file_location=null,e.prototype.package_file_data={},e.prototype.load=function(e){return this.package_file_location=e,this.package_file_data=require(this.package_file_location)},e.prototype.save=function(){var e;return e=JSON.stringify(this.package_file_data,null,2),e+="\n",r.writeFileSync(this.package_file_location,e,"utf8")},e.prototype.setVersion=function(e){return this.package_file_data.version=e},e.prototype.getVersion=function(){return this.package_file_data.version},e}(),module.exports=p,r=require("fs"),module.exports=function(e,t,i){var o,n;return o=r.readFileSync(e),n=o.toString().replace(t,i),r.writeFileSync(e,n,"utf8")}}).call(this);