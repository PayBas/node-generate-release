(function(){var e,t,i,r,o,n,a,s,l,u,c,p,_;i=null!=process.env.IS_DEBUG,r=null!=process.env.IS_TEST,l=require("bluebird"),o=require("minimist"),e=require("child_process"),s=require("parse-spawn-args"),n=require("./lib/Options"),t=require("./lib/GitCommands"),a=require("./lib/PackageFile"),c=require("./lib/askReleaseType"),p=require("./lib/incrementVersion"),u=require("./lib/askConfirmUpdate"),_=require("./lib/writeNewReadme"),module.exports=function(m){var f,h;return f=new n,h=new a,l.try(function(){return m.slice(2)}).then(o).then(function(e){return f.parseArgs(e)}).then(function(){return r?void 0:t.checkForCleanWorkingDirectory()}).then(function(){return f.release_type?void 0:c().then(function(e){return f.release_type=e})}).then(function(){return h.load(f.package_file_location)}).then(function(){return f.current_version||(f.current_version=h.getVersion()),f.next_version=p(f.current_version,f.release_type)}).then(function(){return f.no_confirm||u(f.current_version,f.next_version)}).then(function(e){if(!e)throw new Error("Update Canceled")}).then(function(){return r?console.info("TEST: GitCommands.preCommands "+f.next_version+", "+f.skip_git_pull):t.preCommands(f.next_version,f.skip_git_pull)}).then(function(){return r?console.info("TEST: writeNewReadme "+f.readme_file_location+", "+f.current_version+", "+f.next_version):_(f.readme_file_location,f.current_version,f.next_version)}).then(function(){return r?console.info("TEST: package_file.setVersion "+f.next_version+" && package_file.save()"):(h.setVersion(f.next_version),h.save())}).then(function(){var t,i,o,n,a,l,u,c,p,_,m,h;if(r){for(p=f.pre_commit_commands,m=[],a=0,u=p.length;u>a;a++)t=p[a],m.push(console.info("TEST: EXEC: "+t));return m}for(c=f.pre_commit_commands,_=[],n=0,l=c.length;l>n;n++){if(o=c[n],i=s.parse(o),t=i.shift(),h=e.spawnSync(t,i),!h)throw h.error;_.push(void 0)}return _}).then(function(){var e;return e=[f.readme_file_location,f.package_file_location].concat(f.additional_files_to_commit),r?console.info("TEST: GitCommands.postCommands "+f.next_version+", "+e+", "+f.skip_git_push):t.postCommands(f.next_version,e,f.skip_git_push)}).then(function(){var t,i,o,n,a,l,u,c,p,_,m,h;if(r){for(p=f.post_commit_commands,m=[],a=0,u=p.length;u>a;a++)t=p[a],m.push(console.info("TEST: EXEC: "+t));return m}for(c=f.post_commit_commands,_=[],n=0,l=c.length;l>n;n++){if(o=c[n],i=s.parse(o),t=i.shift(),h=e.spawnSync(t,i),!h)throw h.error;_.push(void 0)}return _}).catch(function(e){if(i)throw e;return console.log(e.message),process.exit(1)})}}).call(this),function(){var e,t;e=require("inquirer"),t=require("bluebird"),module.exports=function(i,r){var o;return o={type:"confirm",name:"confirm",message:"Are you sure you want to update the release from "+i+" to "+r},new t(function(t){return e.prompt(o,function(e){return t(e.confirm)})})}}.call(this),function(){var e,t;e=require("inquirer"),t=require("bluebird"),module.exports=function(){var i;return i={type:"list",name:"release",message:"Release Type?",default:"patch",choices:["patch","minor","major"]},new t(function(t){return e.prompt([i],function(e){return t(e.release)})})}}.call(this),function(){var e,t;e=require("child_process").execSync,t={env:process.env},t.env.GIT_MERGE_AUTOEDIT="no",module.exports.checkForCleanWorkingDirectory=function(){var i;if(i=e("git status",t),!/^nothing to commit, working directory clean$/m.test(i.toString()))throw new Error("Working directory is not clean, not ready for release")},module.exports.preCommands=function(i,r){return r||(e("git fetch",t),e("git checkout develop",t),e("git pull origin develop --rebase",t),e("git checkout master",t),e("git reset --hard origin/master",t)),e("git checkout develop",t),e("git flow release start "+i,t)},module.exports.postCommands=function(i,r,o){var n,a,s;for(a=0,s=r.length;s>a;a++)n=r[a],e("git add "+n,t);return e('git commit -am "Release '+i+'"',t),e('git flow release finish -m "'+i+'" '+i,t),o?void 0:(e("git push origin develop",t),e("git push origin master",t),e("git push origin --tags",t))}}.call(this),function(){var e,t=function(e,t){function r(){this.constructor=e}for(var o in t)i.call(t,o)&&(e[o]=t[o]);return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e},i={}.hasOwnProperty;e=function(e){function i(e){this.message="generate-release\n\n-r --readme           Path to README.md file. Default: ./README.md\n-p --package          Path to package.json file. Default: ./package.json\n-c --current-version  Current Version. Default: read from package.json\n-t --release-type     Release Type: patch, minor, major. Default: prompt\n-n --no-confirm       Do not ask for confirmation. Default: prompt for confirmation\n-l --skip-git-pull    Do not pull from origin and rebase master and dev. Default: Do pull\n-s --skip-git-push    Do not push to origin when complete. Default: Do push\n"+(e||"")}return t(i,e),i}(Error),module.exports=e}.call(this),function(){module.exports=function(e,t){var i;switch(i=e.split(".").map(function(e){return parseInt(e)}),t){case"patch":i[2]++;break;case"minor":i[1]++,i[2]=0;break;case"major":i[0]++,i[1]=0,i[2]=0;break;default:console.log("Unknown Bump Type"),process.exit(1)}return i.join(".")}}.call(this),function(){var e,t,i,r,o,n,a,s,l;n=require("exists-sync"),i=require("path"),o=require("@nkcmr/bool"),s=require("object-pick"),a=require("extend"),e=require("./HelpError"),r={show_help:["h","help"],readme_file_location:["r","readme"],package_file_location:["p","package"],dot_release_file_location:["d","release-file"],current_version:["c","current-version"],release_type:["t","release-type"],no_confirm:["n","no-confirm"],skip_git_pull:["l","skip-git-pull"],skip_git_push:["s","skip-git-push"]},l=["readme_file_location","package_file_location","no_confirm","skip_git_pull","skip_git_push","pre_commit_commands","post_commit_commands","additional_files_to_commit"],t=function(){function t(){}return t.prototype.readme_file_location="./README.md",t.prototype.package_file_location="./package.json",t.prototype.dot_release_file_location="./.release.json",t.prototype.no_confirm=!1,t.prototype.release_type=null,t.prototype.current_version=null,t.prototype.skip_git_pull=!1,t.prototype.skip_git_push=!1,t.prototype.pre_commit_commands=[],t.prototype.post_commit_commands=[],t.prototype.additional_files_to_commit=[],t.prototype.validation_error="\n",t.prototype.readArgsFromFile=function(){var e;return n(this.dot_release_file_location)?(e=require(this.dot_release_file_location),a(this,s(e,l))):void 0},t.prototype.parseArgs=function(t){if(this.args=t,this.getArgumentValue("show_help"))throw new e;return this.readme_file_location=i.resolve(this.getArgumentValue("readme_file_location")||this.readme_file_location),this.package_file_location=i.resolve(this.getArgumentValue("package_file_location")||this.package_file_location),this.dot_release_file_location=i.resolve(this.getArgumentValue("dot_release_file_location")||this.dot_release_file_location),this.release_type=this.getArgumentValue("release_type")||this.release_type,this.no_confirm=this.getArgumentValue("no_confirm")||this.no_confirm,this.current_version=this.getArgumentValue("current_version")||this.current_version,this.skip_git_pull=this.getArgumentValue("skip_git_pull")||this.skip_git_pull,this.skip_git_push=this.getArgumentValue("skip_git_push")||this.skip_git_push,this.readArgsFromFile(),this.validateArguments()},t.prototype.validateArguments=function(){return this.validateReadmeFileLocation()&&this.validatePackageFileLocation()&&this.validateReleaseType()&&this.validateNoConfirm()&&this.validateSkipGitPull()&&this.validateSkipGitPush()&&this.validatePreCommitCommands()&&this.validatePostCommitCommands()&&this.validateAdditionalFilesToCommit()||function(){throw new e(this.validation_error)}.call(this)},t.prototype.validateReadmeFileLocation=function(){return n(this.readme_file_location)?!0:(this.validation_error+="Readme does not exist: "+this.readme_file_location+"\n",!1)},t.prototype.validatePackageFileLocation=function(){return n(this.package_file_location)?!0:(this.validation_error+="Package file does not exist: "+this.package_file_location+"\n",!1)},t.prototype.validateCurrentVersion=function(){return this.current_version&&!this.current_version.test(/(\d+\.){2}\d+/)?(this.validation_error+="Invalid current version: "+this.current_version+"\n",!1):!0},t.prototype.validateReleaseType=function(){var e;return this.release_type&&"patch"!==(e=this.release_type)&&"minor"!==e&&"major"!==e?(this.validation_error+="Unknown release type: "+this.release_type+"\n",!1):!0},t.prototype.validateNoConfirm=function(){return"boolean"!=typeof this.no_confirm?(this.validation_error+="Invalid value for no-confirm\n",!1):!0},t.prototype.validateSkipGitPush=function(){return"boolean"!=typeof this.skip_git_push?(this.validation_error+="Invalid value for skip-git-push\n",!1):!0},t.prototype.validateSkipGitPull=function(){return"boolean"!=typeof this.skip_git_pull?(this.validation_error+="Invalid value for skip-git-pull\n",!1):!0},t.prototype.validatePreCommitCommands=function(){return Array.isArray(this.pre_commit_commands)?!0:(this.validation_error+="Pre Git Commands must be an array",!1)},t.prototype.validatePostCommitCommands=function(){return Array.isArray(this.post_commit_commands)?!0:(this.validation_error+="Post Git Commands must be an array",!1)},t.prototype.validateAdditionalFilesToCommit=function(){return Array.isArray(this.additional_files_to_commit)?!0:(this.validation_error+="Additional Files to Commit must be an array",!1)},t.prototype.getArgumentValue=function(e){var t,i;return i=this,function(){var o,n,a,s;for(a=r[e],s=[],o=0,n=a.length;n>o;o++)t=a[o],i.args[t]&&s.push(i.args[t]);return s}()[0]},t}(),module.exports=t}.call(this),function(){var e,t;e=require("fs"),t=function(){function t(){}return t.prototype.package_file_location=null,t.prototype.package_file_data={},t.prototype.load=function(e){return this.package_file_location=e,this.package_file_data=require(this.package_file_location)},t.prototype.save=function(){var t;return t=JSON.stringify(this.package_file_data,null,2),t+="\n",e.writeFileSync(this.package_file_location,t,"utf8")},t.prototype.setVersion=function(e){return this.package_file_data.version=e},t.prototype.getVersion=function(){return this.package_file_data.version},t}(),module.exports=t}.call(this),function(){var e;e=require("fs"),module.exports=function(t,i,r){var o,n;return o=e.readFileSync(t),n=o.toString().replace(i,r),e.writeFileSync(t,n,"utf8")}}.call(this);