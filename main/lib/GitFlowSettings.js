// Generated by CoffeeScript 1.10.0

/*
  Generate Release
  Kevin Gravier
  MIT License
 */

(function() {
  var BRANCH_CONFIG, FS, GitFlowSettings, IniParser, PREFIX_CONFIG, Promise,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Promise = require('bluebird');

  FS = require('fs');

  IniParser = require('iniparser');

  BRANCH_CONFIG = 'gitflow "branch"';

  PREFIX_CONFIG = 'gitflow "prefix"';

  GitFlowSettings = (function() {
    GitFlowSettings.prototype.project_path = '';

    GitFlowSettings.prototype.master = 'master';

    GitFlowSettings.prototype.develop = 'develop';

    GitFlowSettings.prototype.version_tag_prefix = '';

    function GitFlowSettings(project_path) {
      this.project_path = project_path;
      this.parseIni = bind(this.parseIni, this);
      this.extractGitFlowDataFromIniData = bind(this.extractGitFlowDataFromIniData, this);
      this.getConfigFile = bind(this.getConfigFile, this);
    }

    GitFlowSettings.prototype.getConfigFile = function() {
      var file;
      file = this.project_path + "/.git/config";
      if (!FS.existsSync(file)) {
        throw new Error("Git Config File is missing: " + file);
      }
      return IniParser.parseSync(file);
    };

    GitFlowSettings.prototype.extractGitFlowDataFromIniData = function(ini_data) {
      if (!((ini_data[BRANCH_CONFIG] != null) && (ini_data[BRANCH_CONFIG]['master'] != null) && (ini_data[BRANCH_CONFIG]['develop'] != null))) {
        throw new Error('Git config missing git-flow branch configuration');
      }
      if (!((ini_data[PREFIX_CONFIG] != null) && (ini_data[PREFIX_CONFIG]['versiontag'] != null))) {
        throw new Error('Git config missing git-flow prefix configuration');
      }
      this.master = ini_data[BRANCH_CONFIG]['master'];
      this.develop = ini_data[BRANCH_CONFIG]['develop'];
      return this.version_tag_prefix = ini_data[PREFIX_CONFIG]['versiontag'];
    };

    GitFlowSettings.prototype.parseIni = function() {
      return Promise["try"](this.getConfigFile).then(this.extractGitFlowDataFromIniData);
    };

    return GitFlowSettings;

  })();

  module.exports = GitFlowSettings;

}).call(this);
